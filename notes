todo: 
Add method to parse string literals and handle escaped characters
Implement stripping comments
Add support for hex and binary numlits
Add infix parsing for op-assign operators
Add more shell commands
Add error handling for Eval

//*--------------| GRAMMAR |--------------*/

Legend:
- # -> more than one
- ~~? -> optional
- | -> or

All other symbols are recognized tokens as part of monkey's grammar

Statements [STMT]:
Any expression can be a statement
[IMPORT] Import Statements -> import IDENT | ( #IDENT, )
[LET] Let Statement -> let IDENT = EXPR;
[RETURN] Return Statement -> return EXPR;
[BLOCK] Block Statements -> { #STMT }
[FNSIG] Function Signatures -> fn IDENT(#EXPR) -> TYPE;
[FOR] For loops -> for IDENT in EXPR { #STMT }
[WHILE] While loops -> while EXPR { #STMT }

Expressions [EXPR]:
[LIT] Literals -> STRLIT | NUMLIT | BOOL | FNLIT
[LIST] List literals -> IDENT[ ~#EXPR~? ]
[MAP] Map literals -> map{TYPE, TYPE}{ #EXPR, #EXPR }
[CLOS] Closures -> fn( ~#EXPR~? ) ~-> TYPE~? { #STMT }
[FNCAL] Function calls -> IDENT( ~#EXPR~? )
[METHD] Method calls -> IDENT.FNCAL
[IFEXP] If Expressions -> if (EXPR) { #STMT } else { #STMT }

Declarations [DECL]:
[CLASS] Classes -> class IDENT { ... }
[FNLIT] Function Literals -> fn IDENT( ~#EXPR~? ) ~-> TYPE~? { #STMT .. ~return EXPR~? }
[TRAIT] Traits -> trait IDENT { [FNSIG] }

- The dot operator is only used to namespace classes and functions from different files
- Functions cannot be declared within functions
    - To declare callable functions within a function, use a closure